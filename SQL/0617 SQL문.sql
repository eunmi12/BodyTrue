drop table USER;
create Table USER (
	  USER_NO int not null primary key auto_increment,
	  USER_EMAIL varchar(50),
	  USER_PWD varchar(30),
	  USER_NAME varchar(30) ,
	  USER_SEX char(1),
	  USER_ADDNO varchar(30),
	  USER_ADD1 varchar(50),
	  USER_ADD2 varchar(50),
	  USER_TEL varchar(30),
	  USER_AUTH int not null default 1,
	  USER_BAN boolean not null default 0,
	  USER_PROFILE varchar(100) default NULL,
	  USER_SOCIAL int not null
);

drop table TRAINER;
create table TRAINER(
	TR_NO int not null primary key auto_increment,
	TR_EMAIL varchar(50),
	TR_PWD varchar(30),
	TR_NAME varchar(30),
	TR_SEX char(1),
	TR_ADDNO varchar(30),
	TR_ADD1 varchar(50),
	TR_ADD2 varchar(50),
	TR_TEL varchar(30),
	TR_ADMIT int not null default 0,
	TR_BAN int not null default 0,
	TR_PIC varchar(100),
	TR_CNT int not null default 0
);

drop table PROGRAM;
create table PROGRAM(
	PRO_NO int not null primary key auto_increment,
	PRO_NAME varchar(50),
	PRO_PRICE int,
	PRO_ADD1 varchar(50),
	PRO_COMMENT1 varchar(2000),
	PRO_COMMENT2 varchar(2000),
	PRO_COMMENT3 varchar(2000),
	PRO_TAG int not null,
	PRO_TR_NO int,
	PRO_CNT int,
	PRO_LIKE boolean not null,
	FOREIGN KEY(PRO_TR_NO) REFERENCES TRAINER (TR_NO)
);

drop table PLIKE;
create table PLIKE(
	PLIKE_DATE datetime default current_timestamp,
	PLIKE_USER_NO int,
	PLIKE_PRO_NO int,
	PLIKE_RATE int,
	PLIKE_STARTDATE datetime,
	PLIKE_ENDDATE datetime,
	FOREIGN KEY(PLIKE_USER_NO) REFERENCES USER (USER_NO),
	FOREIGN KEY(PLIKE_PRO_NO) REFERENCES PROGRAM (PRO_NO)
); 

drop table REVIEW;
create table REVIEW(
	RE_NO int primary key not null auto_increment,
	RE_COMMENT varchar(2000),
	RE_PIC varchar(100),
	RE_DATE datetime default current_timestamp,
	RE_USER_NO int,
	RE_PRO_NO int,
	RE_TR_NO int,
	RE_RATE int,
	DEL_YN boolean default 0 not null,
	FOREIGN KEY(RE_USER_NO) REFERENCES USER (USER_NO),
	FOREIGN KEY(RE_PRO_NO) REFERENCES PROGRAM (PRO_NO),
	FOREIGN KEY(RE_TR_NO) REFERENCES TRAINER (TR_NO)
);

drop table CALENDER;
create table CALENDAR(
	CAL_DATE datetime,
	CAL_STARTDATE datetime,
	CAL_ENDDATE datetime,
	CAL_PRO_NO int,
	CAL_TR_NO int,
	CAL_USER_NO int,
	FOREIGN KEY(CAL_PRO_NO) REFERENCES PROGRAM (PRO_NO),
	FOREIGN KEY(CAL_TR_NO) REFERENCES TRAINER (TR_NO),
	FOREIGN KEY(CAL_USER_NO) REFERENCES USER (USER_NO)
);

drop table PROGRAMIMG;
create table PROGRAMIMG(
	PROIMG_TYPE int not null,
	PROIMG_NO int,
	PROIMG_PATH varchar(100),
	PROIMG_PRO_NO int,
	FOREIGN KEY(PROIMG_PRO_NO) REFERENCES PROGRAM (PRO_NO)
);

drop table REVIEWIMG;
create table REVIEWIMG(
	REVIEWIMG_TYPE int not null,
	REVIEWIMG_NO int,
	REVIEWIMG_PATH varchar(100),
	REVIEWIMG_PRO_NO int,
	FOREIGN KEY(REVIEWIMG_PRO_NO) REFERENCES PROGRAM (PRO_NO)
);

drop table USERIMG;
create table USERIMG(
	USERIMG_TYPE int,
	USERIMG_NO int,
	USERIMG_PATH varchar(100),
	USERIMG_USER_NO int,
	USERIMG_TR_NO int,
	FOREIGN KEY(USERIMG_USER_NO) REFERENCES USER (USER_NO),
	FOREIGN KEY(USERIMG_TR_NO) REFERENCES TRAINER (TR_NO)
);

drop table FAQ;
create table FAQ(
	FAQ_NO INT auto_increment PRIMARY KEY,
	FAQ_Q varchar(2000),
	FAQ_A varchar(2000)
);

use test;

SELECT * FROM USER; 

SELECT RE_RATE FROM REVIEW WHERE RE_PRO_NO=?;

SELECT * FROM FAQ;
INSERT INTO FAQ  VALUE  (1,"질문입니다1","답글입니다1.");
INSERT INTO FAQ  VALUE  (2,"질문입니다2","답글입니다2.");
INSERT INTO FAQ  (FAQ_A) VALUE ("두번째 질문입니다. NO가 2로 오르나요?");
UPDATE FAQ SET FAQ_A= "첫번째 질문의 답변입니다. 네 정상적으로 오릅니다" WHERE FAQ_NO = 1;

UPDATE FAQ SET FAQ_Q = "수정된 N번 질문입니다." WHERE FAQ_NO = 1; 

DELETE FROM FAQ WHERE FAQ_NO=2;

SELECT * FROM REVIEW;
SELECT * FROM USER;

INSERT INTO USER (USER_EMAIL,USER_PWD,USER_NAME,USER_SEX,USER_ADDNO,USER_ADD1,USER_ADD2,USER_TEL) VALUES ("MSH9870@GMAIL.COM","1234","민승호","M","000-000","강남구","도곡동","010-0000-0000");

ALTER TABLE USER DROP COLUMN USER_PROFILE;
ALTER TABLE USER ADD column USER_PROFILE VARCHAR(100) DEFAULT NULL;

ALTER TABLE USER DROP COLUMN USER_SOCIAL;
ALTER TABLE USER ADD column USER_SOCIAL int not null DEFAULT 0;

DELETE FROM USER WHERE USER_NO=1;

INSERT INTO USER (USER_EMAIL,USER_PWD,USER_NAME,USER_AUTH,USER_SEX,USER_ADDNO,USER_ADD1,USER_ADD2,USER_TEL) 
VALUES ("MSH9870@GMAIL.COM","1234","민승호","1","M","000-000","강남구","도곡동","010-0000-0000");

SELECT USER_EMAIL FROM USER;
SELECT * FROM USER;

UPDATE USER SET USER_PWD="임시비밀번호" WHERE USER_NAME = "민승호" AND USER_EMAIL = "MSH9870@GMAIL.COM" AND USER_TEL="010-0000-0000";

SELECT USER_EMAIL FROM USER WHERE USER_NAME = "민승호" AND USER_TEL="010-0000-0000";

SELECT * FROM PROGRAM;

ALTER TABLE PROGRAM DROP COLUMN PRO_PRICE;
ALTER TABLE PROGRAM MODIFY COLUMN PRO_LIKE BOOLEAN NOT NULL DEFAULT 0;
INSERT INTO PROGRAM (PRO_NAME, PRO_ADD1,PRO_COMMENT1,PRO_COMMENT2,PRO_COMMENT3,PRO_TAG) VALUES ("프로그램명","서울시 강남구 도곡동","설명1","설명2","설명3",0);
SELECT * FROM PROGRAM;

SELECT PRO_NAME, TR_NAME, RE_RATE
FROM PROGRAM P JOIN REVIEW R ON P.PRO_NO = R.RE_PRO_NO JOIN TRAINER T ON PRO_TR_NO = T.TR_NO 
ORDER BY PRO_CNT DESC,PRO_NAME;

SELECT PRO_NAME, TR_NAME, RE_RATE
FROM PROGRAM P JOIN REVIEW R ON P.PRO_NO = R.RE_PRO_NO JOIN TRAINER T ON PRO_TR_NO = T.TR_NO 
ORDER BY RE_RATE DESC,PRO_NAME;

SELECT PRO_NAME, TR_NAME, RE_RATE
FROM PROGRAM P JOIN REVIEW R ON P.PRO_NO = R.RE_PRO_NO JOIN TRAINER T ON PRO_TR_NO = T.TR_NO JOIN CALENDAR C ON PRO_NO = C.CAL_PRO_NO
ORDER BY CAL_DATE DESC,PRO_NAME;



COMMIT;